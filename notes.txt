RabbitMQ

Distributed Programming.

 Programs run on different runtimes and machines across network or local.

 Programs need to interact each other.

Why programms need to interact?
 Because they want to exchange some data(message).


Distributed architectures

1.main frame based

2.client-server

Apps --   Apps
 |          |
 os         os
  |         |
 server---client talks each other to exchange message
 RPI /RPC

SAME RUNTIME - SAME LANGUAGE

TEXIDO 

interoperable distributed programming

server and client can be anything

CORBA -  COmmon Object Request Broker Architecture - ORB
  was built up on object oriented modles : distributed object theory

Apps --     Apps
 |  objects |
 os         os
  |         |
 server---client 

SUN : ON java

RMI

EJB

Microsoft  : DCOM

Problems with Enterprise integration.

1.interprises are connected with different and different tech

Message Oriented Middlwares : MOM.

Client Apps send data(message) ----[MOM]--------Server Apps

RabbitMQ is one of the MOM product.

*****************************************************************************************

Style of Communication:
......................

1.Sync style
   Program1 on client A waits for Result of Program2 which is running Client 2

2.Async style
  Program1 on client A need not wait for Result of Program2 which is running Client 2

Ways to implement async
1.Messaging  :Async
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Distributed Messaging and standards:
...................................

Communication channels

Messaging Protocals standards are questions mark

1.reliable
2.security
3.performance


Messaging standards : AMQP 

AMQP is application level protocal, wire protocal is TCP /IP 

RabbitMQ is the first the reference implementation project built on AMQP.

appprotal
 |    
jdbc:mssql://host:port/dbname------driver----database
       |
       subprotocal

ampq:

RabbitMQ core concepts

Erlang provides runtime, called rabbitmq process.
Inside RabbitMq process, an web application has been deployed that is called as "VirtualHost"

Virtual host since is web app,  which has collection of objects.

 -Queue
    It is first in first out datastructure. but in rabbmitmq some times Queue works differently.
  so that we call "Weak Queue"

 -Exchange
   Built in broker /descision maker who decides how and where to deliver messages.


RabbitMQ installation on linux, windows:

Linux :
 - for administration

Windows :
-Development

Docker installation
 -dev and deployment

*****************************************************************************************

Linux :

setup file

#!/bin/sh

## If sudo is not available on the system,
## uncomment the line below to install it
# apt-get install -y sudo

sudo apt-get update -y

## Install prerequisites
sudo apt-get install curl gnupg -y

## Install RabbitMQ signing key
curl -fsSL https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc | sudo apt-key add -

## Install apt HTTPS transport
sudo apt-get install apt-transport-https

## Add Bintray repositories that provision latest RabbitMQ and Erlang 23.x releases
sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list <<EOF
## Installs the latest Erlang 23.x release.
## Change component to "erlang-22.x" to install the latest 22.x version.
## "bionic" as distribution name should work for any later Ubuntu or Debian release.
## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang
## Installs latest RabbitMQ release
deb https://dl.bintray.com/rabbitmq/debian bionic main
EOF

## Update package indices
sudo apt-get update -y

## Install rabbitmq-server and its dependencies
sudo apt-get install rabbitmq-server -y --fix-missing

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

Server status:

#!/bin/sh

## If sudo is not available on the system,
## uncomment the line below to install it
# apt-get install -y sudo

sudo apt-get update -y

## Install prerequisites
sudo apt-get install curl gnupg -y

## Install RabbitMQ signing key
curl -fsSL https://github.com/rabbitmq/signing-keys/releases/download/2.0/rabbitmq-release-signing-key.asc | sudo apt-key add -

## Install apt HTTPS transport
sudo apt-get install apt-transport-https

## Add Bintray repositories that provision latest RabbitMQ and Erlang 23.x releases
sudo tee /etc/apt/sources.list.d/bintray.rabbitmq.list <<EOF
## Installs the latest Erlang 23.x release.
## Change component to "erlang-22.x" to install the latest 22.x version.
## "bionic" as distribution name should work for any later Ubuntu or Debian release.
## See the release to distribution mapping table in RabbitMQ doc guides to learn more.
deb https://dl.bintray.com/rabbitmq-erlang/debian bionic erlang
## Installs latest RabbitMQ release
deb https://dl.bintray.com/rabbitmq/debian bionic main
EOF

## Update package indices
sudo apt-get update -y

## Install rabbitmq-server and its dependencies
sudo apt-get install rabbitmq-server -y --fix-missing

*********************************************************************************************

After installing you can verfify the installation :


$sudo service rabbitmq-server status


Start,Stop,Restart the server:

There are two ways:

1.Using Linux operating commands

 $sudo service rabbitmq-server stop 
 $sudo service rabbitmq-server status
 $sudo service rabbitmq-server start
 $sudo service rabbitmq-server restart

2.Using rabbitmq provided cli command


******************************************************************************************

Rabbit MQ Boot Process:
.......................

$sudo rabbitmq-server start
          |
          loaded into main memory
               |
              Process(Erlang) is ready


 Since Rabbit Mq is server , which has default port 5672.

Rabbit MQ server mostly powered with configurations.


$sudo rabbitmq-server start
          |
          loaded into main memory
               |
              Process(Erlang) is ready
                |
                starts reading a configuration file
                        /etc/rabbitmq

Lab : 
1.Testing config files
  $ls -l /etc/rabbitmq

 by default there will be no files , empty


$sudo rabbitmq-server start
          |
          loaded into main memory
               |
              Process(Erlang) is ready
                |
                starts reading a configuration file
                        /etc/rabbitmq

Under this folder you can have three major configuration files, which need to be created
manually.

1.rabbitmq-env.conf

$sudo rabbitmq-server start
          |
          loaded into main memory
               |
              Process(Erlang) is ready
                |
                starts reading a configuration file
                        /etc/rabbitmq/rabbitmq-env.conf --entry file where major 
RabbitMQ configurations are found.

 But we have seen no such file , found. then how rabbit mq works.

    ->RabbitMQ has distributed default settings along with rabbitmq server.


The default Settings for RabbitMQ:

1.Node
   Node is logical representation machine,on which rabbitmq application are running
2.Port
   Node is running on default port is 5672
3.Default log file
   /var/log/rabbitmq

Lab verify log files

$ls -l /var/log/rabbitmq

 rabbit@ubuntu1-pc.log

$cat /var/log/rabbitmq/rabbit@ubuntu1-pc.log

 node           : rabbit@ubuntu1-pc
 home dir       : /var/lib/rabbitmq
 config file(s) : (none)
 cookie hash    : 3eMMjx9QP5Aq/27WdoZmgA==
 log(s)         : /var/log/rabbitmq/rabbit@ubuntu1-pc.log
                : /var/log/rabbitmq/rabbit@ubuntu1-pc_upgrade.log
 database dir   : /var/lib/rabbitmq/mnesia/rabbit@ubuntu1-pc
 

Default Node name always "rabbit" and its port 5672





